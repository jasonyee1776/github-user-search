{"version":3,"sources":["Form.js","Card.js","CardList.js","index.js"],"names":["Form","addCard","clearCards","this","API_URL","searchTerm","searchInput","document","querySelector","addEventListener","handleKeyup","event","submitButton","disabled","clearButton","form","handleSubmit","target","value","trim","console","log","preventDefault","axios","get","then","data","catch","err","formatError","reset","error","errorText","createElement","style","color","fontWeight","fontSize","innerText","appendChild","setTimeout","removeChild","Card","card","avatar_url","html_url","name","public_repos","bio","blog","Date","created_at","toLocaleString","month","getDate","getFullYear","CardList","cards","html","map","join","render","getElementById","app","getCards","bind","localStorage","setItem","JSON","stringify","getItem","parse","node","innerHTML"],"mappings":"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","file":"static/js/main.d137ee04.chunk.js","sourcesContent":["import axios from 'axios';\n\n// set variable outside of JS class\n// good practice to use ALL CAPS with const\nconst API_URL = 'https://api.github.com/users'\n\n// create a JavaScript Class using ES6\nclass Form {\n    // constructor() is a method that you can call on ES6 classes\n    // Passing App class methods - addCard() and clearCards() - as parameter of the Form class constructor() method\n    constructor(addCard, clearCards) {\n        this.addCard = addCard;\n        this.clearCards = clearCards;\n        this.API_URL = '';\n        this.searchTerm = '';\n        // to create a variable...\n        // one does NOT use const, let, var, etc\n        // must put variables on the \"this\" value\n        this.searchInput = document.querySelector(\"input[name='search']\");\n        // add an event listener to the newly established variable\n        this.searchInput.addEventListener('keyup', () => {this.handleKeyup(event)});\n        this.submitButton = document.querySelector(\"button[type='submit']\");\n\n/* \nPREVENT USER FROM SUBMITTING AN EMPTY INPUT ---> \n\n2 METHODS:\n\n   1st method - use an if statment when input value is an empty string... disable button\n        -if (this.searchTerm === '') {\n            this.submitButton.disabled = true;\n        }\n    2nd method - disable submit button when the value of user input is empty using STRING COERCION\n        -In JS - an empty string is coerced to FALSE\n        -Use '!' to set the opposite value\n        -SEE BELOW...\n*/\n        this.submitButton.disabled = !this.searchTerm;\n\n        // Add event listener when user clicks the 'clear' button\n        // Calls the clearCards() method when users clciks on the clear button\n        this.clearButton = document.querySelector(\"button[type='button']\");\n        this.clearButton.addEventListener('click', () => this.clearCards());\n\n        // Add event listener when user submits the form \n        this.form = document.querySelector('form');\n        this.form.addEventListener('submit', () => this.handleSubmit(event));\n    }\n\n    handleKeyup(event) {\n        // getting value of input typed by user\n        this.searchTerm = event.target.value.trim();\n        console.log(this.searchTerm)\n        // \"interpolating\" a variable below\n        this.API_URL = `${API_URL}/${this.searchTerm}`;\n        console.log(this.API_URL);\n        this.submitButton.disabled = !this.searchTerm;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        // Axios will make a GET for a specific URL\n        // Will return a PROMISE \n        // PROMISE = guarentee a value will be retunred at some point\n        axios\n            .get(this.API_URL) \n            // callback function\n            // 'res' is the results from API call SEE LINE BELOW\n            // .then(res => console.log(res.data));\n            // What if we only want a specific 'data' from our 'res'?\n            // Can achieve this using DESTRUCTURING (SEE BELOW)\n            // wrap 'data' object in curly brackets\n            .then(({ data }) => this.addCard(data))\n            // catches users that are invalid and returns an error \n            // lets developers customize error message to user\n            .catch(err => this.formatError('Promise rejected!', err));\n            // Need to remove user input once user submits the form\n            // this.\n            this.form.reset();\n        console.log(event);\n        // removes text from input when user hits submt button\n        // can use... this.searchTerm = '';\n        // or below...\n        // add the reset() method to the form, this will remove any text from the input\n        this.form.reset();\n    }\n\n    formatError(err) {\n        console.error(err);\n        const errorText = document.createElement('p');\n        errorText.style.color = 'red';\n        errorText.style.fontWeight = 'bold';\n        errorText.style.fontSize = '1.5em';\n        errorText.innerText = 'No user found';\n        this.form.appendChild(errorText);\n        // to remove error text from DOM\n        setTimeout(() => this.form.removeChild(errorText), 5000);\n    }\n}\n\nexport default Form; ","const Card = card => {\n    return `\n    <li>\n        <img src = '${card.avatar_url}' style = 'height: 200px'/>\n        <a href = '${card.html_url}'>\n            <h3>${card.name}</h3>\n        </a>\n        <p>Public Repos: <strong>${card.public_repos}</strong></p>\n        <p>Bio: ${card.bio ? `Bio ${card.bio}` : '' } </p>\n        <p>Website: <span> <a href = '${card.blog}'>${card.blog}</a></span></p>\n        <p>Has been a member of github since <u>${new Date(card.created_at).toLocaleString('en-us', { month: 'long' })} ${new Date(card.created_at).getDate()}, ${new Date(card.created_at).getFullYear()}</u></p>\n    </li>\n   `\n}\n\n// Can also write above code by 'DESTRUCTURING' the code\n/* \nconst Card = ({ avatar_url, html_url, name, public_repos, bio, blog, created_at }) => {\n    return `\n    <li>\n        <img src = '${avatar_url}' style = 'height: 200px'/>\n        <a href = '${html_url}'>\n            <h3>${name}</h3>\n        </a>\n        <p>Public Repos: <strong>${public_repos}</strong></p>\n        <p>Bio: ${bio ? `Bio ${bio}` : '' } </p>\n        <p>Website: <span> <a href = '${blog}'>${blog}</a></span></p>\n        <p>Has been a member of github since <u>${new Date(created_at).toLocaleString('en-us', { month: 'long' })} ${new Date(created_at).getDate()}, ${new Date(created_at).getFullYear()}</u></p>\n    </li>\n   `\n}\n*/\n\nexport default Card;","import { render } from './index'\nimport Card from './Card';\n\nconst CardList = cards => {\n    const html = `\n        <ul>\n            ${cards.map(card => Card(card)).join('')}\n        </ul>\n    `\n    render(html, document.getElementById('root'));\n};\n\nexport default CardList","// import test.js files to this (index.js) file\nimport Form from './Form';\nimport CardList from './CardList';\n\n// need to 'instantiate' our class\n\nclass App {\n    constructor() {\n        // store all github users into an array\n        // this.cards = [];\n\n        // this.cards will get a method call getCards()\n        this.cards = this.getCards();\n\n\n        // allows the user to DYNAMICALLY set the value of THIS\n        // pseudo-code = anytime we use tha addCard() function, we are always binding it to the App Class (not the Form class)\n        // Currently, when you call 'this' on the addCard method, it refers to the Form class\n        // we want to force 'this' to refer to the App class\n        // using method below will force 'this' to refer to the App class\n        \n        // WILL USE bind() method often to set th value of 'this'\n        this.addCard = this.addCard.bind(this);\n        //\n        this.clearCards = this.clearCards.bind(this);\n    }\n\n    addCard(data) {\n        // console.log(data);\n        // Two ways to add users data to array\n            // 1) Using .push method to add users to array\n                // this.cards.push(data);\n            // 2) ES6 feature 'spread operator'\n                // Creating a new array and copying all the values of this.cards and then adding the data as the last value\n                // ALSO a great way to order entires in an array\n        this.cards = [data, ...this.cards];\n        console.log(this.cards);\n\n        // Need to output user data to the DOM somehow\n        CardList(this.cards);\n\n        // Use localStorage to store user data when brower refreshes\n        // stringify() is a method on JSON that converts JSON data into JS strings\n        localStorage.setItem('users', JSON.stringify(this.cards));\n\n    }\n    // create a method that will clear cards\n    // creating clearCards() method on the App class to access the this.cards\n    clearCards() {\n        // set cards array to an empty array\n        this.cards = [];\n        CardList(this.cards);\n        // also want to clear items out of localStorage\n        localStorage.setItem('users', '');\n    }\n    // the getCards() method below will check if any values are present in localStorage\n    // else it will return an empty array \n    getCards() {\n        if(localStorage.getItem('users')) {\n            // the parse() method on JSON will convert the JS strings in localStorage in JSON data\n            return JSON.parse(localStorage.getItem('users'));\n        } else {\n            return [];\n        }\n    }\n}\nconst app = new App()\n// LINE BELOW - allows us to pass the addCard() and clearCards() method (that was only available on the App class) to the Form class\n// Passing both methods as arguments of the Form class\nconst form = new Form(app.addCard, app.clearCards);\n\n// create render() method that can render the 'data' from CardList.js file and append it to the DOM\n// 'node' in this case refers to the DOM element 'root'\nexport const render = (html, node) => (node.innerHTML = html);\n\n// Due to the render() method above, we will need to call CardList() again in order to append items stored in localStorage to the DOM\nCardList(app.cards);"],"sourceRoot":""}